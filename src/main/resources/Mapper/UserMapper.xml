<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.manage.Mapper.UserMapper">
    <resultMap id="user" type="com.test.manage.Entity.User">
        <id property="id" column="uid"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="clazz" column="clazz" />
    </resultMap>

    <resultMap id="userRole" type="com.test.manage.Entity.User">
        <id property="id" column="uid"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="clazz" column="clazz" />
        <collection property="roles" ofType="com.test.manage.Entity.Role">
            <id property="id" column="rid"/>
            <result property="role_name" column="role"/>
        </collection>
    </resultMap>
	
	<resultMap id="userInfo" type="com.test.manage.Entity.User">
        <id property="id" column="uid"/>
        <result property="name" column="name"/>
        <result property="clazz" column="clazz" />
        <collection property="roles" ofType="com.test.manage.Entity.Role">
            <id property="id" column="rid"/>
            <result property="role_name" column="role"/>
        </collection>
    </resultMap>

    <resultMap id="role" type="com.test.manage.Entity.Role">
        <id property="id" column="rid"></id>
        <result property="role_name" column="role"></result>
    </resultMap>

    <select id="findUserByName" parameterType="String" resultMap="user">
        select * from user where name=#{name}
    </select>

    <select id="findUserById" parameterType="long" resultMap="userRole">
        select u.*, r.* from user_role ur left join user u on ur.user_id=u.uid
        left join role r on ur.role_id=r.rid where u.uid=#{id}
    </select>

    <select id="getTotal" resultType="long">
        select count(*) from user;
    </select>

    <select id="listAll" resultMap="userRole">
        select u.*,r.* from user u left join user_role ur on u.uid=ur.user_id
        left join role r on r.rid=ur.role_id
    </select>

    <select id="getUserByPage" resultMap="userInfo">
        SELECT u.*,r.* FROM (SELECT * FROM user ORDER BY name LIMIT #{size} OFFSET #{page}) u
        LEFT JOIN user_role  ur ON ur.user_id=u.uid
        LEFT JOIN role r ON r.rid=ur.role_id
    </select>

    <update id="updateUser" parameterType="com.test.manage.Entity.User">
        update user
        <set>
            <if test="name!=null"> name=#{name}, </if>
            <if test="password!=null"> password=#{password},</if>
            <if test="clazz!=null">clazz=#{clazz}</if>
        </set>
          where uid=#{id}
    </update>


    <insert id="setUserRole" parameterType="com.test.manage.Entity.User">
        insert into user_role(user_id,role_id) values
        <foreach collection="roles" item="role"  separator="," >
           (#{id}, #{role.id})
        </foreach>
    </insert>

    <select id="getUserRole" parameterType="String" resultMap="userRole">
        select u.*, r.* from user_role ur left join user u on ur.user_id=u.uid
        left join role r on ur.role_id=r.rid where u.name=#{name}
    </select>

    <select id="getRoles" resultMap="role">
        select * from role
    </select>

    <insert id="saveUser" parameterType="com.test.manage.Entity.User" useGeneratedKeys="true" keyProperty="id">
        insert into user(uid,name,password,clazz) values (#{id},#{name},#{password},#{clazz})
    </insert>

    <delete id="deleteUser" parameterType="long">
        delete from user where uid=#{id}
    </delete>

    <delete id="deleteUserRole" parameterType="long">
        delete from user_role where user_id=#{id}
    </delete>
</mapper>